Create a function named divisors/Divisors that takes an integer n > 1 and returns an array with all of the integer's divisors(except for 1 and the number itself), 
from smallest to largest. If the number is prime return the string '(integer) is prime' (null in C#) (use Either String a in Haskell and Result<Vec<u32>, String> in Rust).
Example:
divisors(12); // should return [2,3,4,6]
divisors(25); // should return [5]
divisors(13); // should return "13 is prime"

Создайте функцию с именем divisors/Divisors, которая принимает целое число n > 1 и возвращает массив со всеми делителями целого числа (кроме 1 и самого числа), 
от наименьшего до наибольшего. Если число является простым, возвращает строку '(целое число) является простым'.
Пример:
делители (12) ;//должны возвращать [2,3,4,6]
делители (25) ;//должны возвращать [5]
делители (13) ;//должны возвращать "13 является простым"

CODE 1:
function divisors(integer) {
  let arr = []
  for (let i = 2; i <= integer; i++) {
    if (integer % i === 0)
      arr.push(i)
  } 
   if (arr.length > 1) {arr.pop(arr.length - 1)} 
    else { return arr[0] + ' is prime'}
   return arr
  }
  
 CODE 2:
 function divisors(integer) {
  let arr = []
  for (let i = 2; i <= Math.floor(integer / 2); i++) if (integer % i === 0) arr.push(i)
  return arr.length ? arr : integer + ' is prime'
}

CODE 3:
function divisors(integer) {
  let arr = []
  for(let i = 2; i < integer; i++) {
    if(integer % i === 0) {
      arr.push(i)
    }
  }
  return arr.length ? arr : integer + ' is prime'
}
