The goal is to create a function 'numberToPower(number, power)' that "raises" the number up to power (ie multiplies number by itself power times).
Examples
numberToPower(3,2)  // -> 9 ( = 3 * 3 )
numberToPower(2,3)  // -> 8 ( = 2 * 2 * 2 )
numberToPower(10,6) // -> 1000000

Note: Math.pow and some other Math functions like eval() and ** are disabled.

CODE 1:
function numberToPower(number, power){
  let count = 0;
  let mult = 1;
  do {
    if (power > 0) mult *= number; 
    count++;
  } while (count < power)
    return mult;
}

console.log(numberToPower(4, 2)  // 16;
console.log(numberToPower(10, 4) // 10000;
console.log(numberToPower(10, 0) // 1;

CODE 2:
function numberToPower(number, power){
  var total = 1;
  for (var i = 1; i <= power; i++) { 
    total = total * number;
  }
  return total;
}

CODE 3:
const numberToPower = (number,power) => power > 0 ? number * numberToPower(number,power-1) : 1;

CODE 4:
function numberToPower(number, power){
  if (power === 0) return 1;
  return number * numberToPower(number, power - 1)
}

CODE 5:
function numberToPower(number, power){
  return Array(power).fill(number).reduce((res, n) => res * n, 1);
}

CODE 6:
function numberToPower(number, power) {
  return vm.runInThisContext(number + '*' + '*' + power);
}

CODE 7:
const numberToPower = (n, p) => {
  let result = 1;
  for (let i = 0; i < p; i++) result *= n;
  return result; 
}
