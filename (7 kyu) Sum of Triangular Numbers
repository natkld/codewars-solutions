Your task is to return the sum of Triangular Numbers up-to-and-including the nth Triangular Number.
Triangular Number: "any of the series of numbers (1, 3, 6, 10, 15, etc.) obtained by continued summation of the natural numbers 1, 2, 3, 4, 5, etc."

[01]
02 [03]
04 05 [06]
07 08 09 [10]
11 12 13 14 [15]
16 17 18 19 20 [21]
e.g. If 4 is given: 1 + 3 + 6 + 10 = 20.
Triangular Numbers cannot be negative so return 0 if a negative number is given.

Задача состоит в том, чтобы возвратить сумму треугольных чисел вплоть до n-го треугольного числа.
Треугольное число: "любой из рядов чисел (1, 3, 6, 10, 15 и т. д.), полученных непрерывным суммированием натуральных чисел 1, 2, 3, 4, 5 и т. д"..

[01]
02 [03]
04 05 [06]
07 08 09 [10]
11 12 13 14 [15]
16 17 18 19 20 [21]
Например, если задано 4: 1 + 3 + 6 + 10 = 20.
Треугольные числа не могут быть отрицательными, поэтому возвращает 0, если задано отрицательное число.

CODE 1:
function sumTriangularNumbers(n) {
  let text
  let e = 0
  let sum = 0
for (let i = 1; i <= n; i++) { 
        for (let j = 1; j <= i; j++) {
          e += 1
            text += e + " "  
        }
            sum += e 
            text += "\n"
    }
            return(sum)
}

console.log(sumTriangularNumbers(6))    // 56
console.log(sumTriangularNumbers(34))   // 7140
console.log(sumTriangularNumbers(-291)) // 0
console.log(sumTriangularNumbers(943))  // 140205240
console.log(sumTriangularNumbers(-971)) // 0

CODE 2:
function sumTriangularNumbers(n) {
let sum = 0;  
for(let i = 1; i <= n; i++) // 'i' это ряд
{
sum += (i*(i+1))/2;  // это формула считает последнию цифру в ряду и суммирует ее
}
return sum;
}

CODE 3:
function sumTriangularNumbers(n) {
  return n < 0 ? 0 : n * (n + 1) * (n + 2) / 6;
}

CODE 4:
function sumTriangularNumbers(n) {
  if  (n < 0){
  return 0;
  }
  else  {
    return n*(n+1)/2 + sumTriangularNumbers(n-1);
  }
}
 CODE 5:
 const sumTriangularNumbers = n => n>0|0 && n++*n++*n/6;
 
 CODE 6:
 function sumTriangularNumbers(n) {
  let sum = 0
  for (let i=0, j=1; i<n; i++, j += i+1) {
    sum += j
  }
  return sum
}

CODE 7:
unction sumTriangularNumbers(n) {
    let result = 0;
    let sum = 0;
    for (let i = 0; i < n; i++) {
        result += i + 1;
        sum += result;
    }
    if (n < 0) {
        return 0;
    }
    return sum;
}

CODE 8:
const sumTriangularNumbers = n => n > 0 ? Array.from(Array(n), (_, i) => (i + 1) * (i + 2) / 2).reduce((s, e) => s + e) : 0;

CODE 9:
function sumTriangularNumbers(n) {
  if(Math.sign(n) === -1) return 0;
  return n * (n + 1) * (n + 2) /6
}

CODE 10:
function sumTriangularNumbers(n) {
  if (n <=0) {return 0}
  a = (n+1);
  b = (n+2);
  return (n * a * b)/6;
}
