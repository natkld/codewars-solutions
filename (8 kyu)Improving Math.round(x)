Improving Math.round(x)
Javascript has a handy built-in Math.round(x) method that rounds a number to the nearest integer:

Math.round(3.14); // Returns 3
Math.round(17.43); // 17
Math.round(198.499); // 198
Math.round(200.5); // 201
Math.round(1784.76); // 1785
But that is sometimes not enough! What if we wanted to round 3.1415926535 to two decimal places? While some languages (such as PHP) has a round() function that supports 
rounding to a specified number of decimal places (e.g. <?php round(3.1415926535, 4); /* 3.1416 (rounded to 4 d.p. as specified) */ ?>), Javascript does not!

Task
Your task is to create a method, Math.roundTo(number, precision) which rounds a given number to precision decimal places.
You may find the following Math methods useful:
Math.round(x) (of course)
Math.pow(x,y) (returns x to the power of y - e.g. Math.pow(3,4) == 81)


Улучшение Math.round (x)
Javascript имеет удобный встроенный метод Math.round (x), который округляет число до ближайшего целого числа:

Math.round (3.14) ;//Возвращает 3
Math.round (17.43);//17
Math.round (198.499);//198
Math.round (200.5);//201
Math.round (1784.76);//1785
Но этого иногда бывает недостаточно! Что если мы хотим округлить 3.1415926535 до двух десятичных знаков? В то время как некоторые языки (например, PHP) имеют функцию round (), 
которая поддерживает округление до заданного числа десятичных знаков (например, <? php round (3.1415926535, 4) ;/* 3,1416 (округление до 4 д.п. как указано) */? >), Javascript нет!

Задача
Задача состоит в создании метода Math.roundTo (число, точность), который округляет заданное число до десятичных разрядов.
Можно использовать следующие математические методы:
Math.round (x) (конечно)
Math.pow (x, y) (возвращает x в степень y - например, Math.pow (3,4) = = 81)

test:
Test.assertEquals(Math.roundTo(3.1415926535, 4), 3.1416);
Test.assertEquals(Math.roundTo(4, 5), 4);
Test.assertEquals(Math.roundTo(4.1235343424, 6), 4.123534);
Test.assertEquals(Math.roundTo(5.3035802, 3), 5.304);
Test.assertEquals(Math.roundTo(0.9384930193848595, 15), 0.938493019384860);
Test.assertEquals(Math.roundTo(9.9999, 3), 10);

CODE 1
Math.roundTo = function (number, precision) {
  return +number.toFixed(precision)
}

CODE 2:
Math.roundTo = (number, precision) => Number(number.toFixed(precision));

CODE 3:
Math.roundTo = function (number, precision) {
  return Math.round(number * Math.pow(10, precision)) / Math.pow(10, precision);
}

CODE 4:
Math.roundTo = function (number, precision) {
  return Number(number.toFixed(precision));
}
