Given 2 elevators (named "left" and "right") in a building with 3 floors (numbered 0 to 2), write a function elevator accepting 3 arguments (in order):
left - The current floor of the left elevator
right - The current floor of the right elevator
call - The floor that called an elevator

It should return the name of the elevator closest to the called floor ("left"/"right").
In the case where both elevators are equally distant from the called floor, choose the elevator to the right.
You can assume that the inputs will always be valid integers between 0-2.
Examples:
elevator(0, 1, 0); // => "left"
elevator(0, 1, 1); // => "right"
elevator(0, 1, 2); // => "right"
elevator(0, 0, 0); // => "right"
elevator(0, 2, 1); // => "right"

Учитывая 2 лифта (названные "левый" и "правый") в здании с 3 этажами (пронумерованы от 0 до 2), напишите функциональный лифт, принимающий 3 аргумента (по порядку):
слева - Текущий этаж левого лифта
справа - Текущий этаж правого лифта
call - Этаж, который вызвал лифт

Он должен вернуть название лифта, ближайшего к вызываемому этажу ("left "/" right").
В случае, когда оба лифта расположены на одинаковом расстоянии от вызываемого этажа, выберите лифт справа.
Можно предположить, что входы всегда будут действительными целыми числами между 0-2.
Примеры:
лифт (0, 1, 0) ;//= > "left"
лифт (0, 1, 1) ;//= > "вправо"
лифт (0, 1, 2) ;//= > "вправо"
лифт (0, 0, 0) ;//= > "вправо"
лифт (0, 2, 1) ;//= > "вправо"

CODE 1:
function elevator(left, right, call){
  let leftDistance = Math.abs(call - left);
  let rightDistance = Math.abs(call - right);
  if (left == right) return "right";
  return leftDistance < rightDistance ? "left":"right";
}
    Test.assertEquals(elevator(0,1,0), 'left');
    Test.assertEquals(elevator(0,1,1), 'right');
    Test.assertEquals(elevator(0,1,2), 'right');
    Test.assertEquals(elevator(0,0,0), 'right');
    Test.assertEquals(elevator(0,2,1), 'right');
    
CODE 2:
const elevator = (left, right, call) => Math.abs(call-left) < Math.abs(call-right) ? 'left' : 'right'

CODE 3:
function elevator(left, right, call) {
  return Math.abs(call - left) < Math.abs(call - right) ? 'left' : 'right';
}
