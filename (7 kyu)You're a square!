A square of squares
You like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!

However, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! 
If you just had a way to know, whether you're currently working in vain… Wait! That's it! You just have to check if your number of building blocks is a perfect square.
Task
Given an integral number, determine if it's a square number:
In mathematics, a square number or perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.
The tests will always use some integral number, so don't worry about that in dynamic typed languages.
Examples
-1  =>  false
 0  =>  true
 3  =>  false
 4  =>  true
25  =>  true
26  =>  false

Квадрат квадратов
Тебе нравятся строительные блоки. Вы особенно любите строительные блоки, которые являются квадратами. И что вам больше нравится, так это расположить их в квадрат квадратных строительных блоков!

Однако иногда их нельзя расположить в квадрат. Вместо этого, вы закончите с обычным прямоугольником! Эти взорванные вещи!
Если бы у тебя был способ узнать, работаешь ли ты в настоящее время напрасно... Подождите! Именно! Вы просто должны проверить, является ли ваше количество строительных блоков идеальным квадратом.
Задача
Учитывая целое число, определите, является ли оно квадратным числом:
В математике квадратное число или совершенный квадрат - это целое число, которое является квадратом целого числа; другими словами, это произведение некоторого целого с собой.
В тестах всегда будет использоваться какое-то целое число, так что не беспокойтесь об этом в динамических типизированных языках.
Примеры
-1 = > ложь
0 = > истина
3 = > ложь
4 = > истина
25 = > истина
26 = > ложь

Test.it("should work for some examples", function(){
    Test.assertEquals(isSquare(-1), false, "-1: Negative numbers cannot be square numbers");
    Test.assertEquals(isSquare( 0), true, "0 is a square number (0 * 0)");
    Test.assertEquals(isSquare( 3), false, "3 is not a square number");
    Test.assertEquals(isSquare( 4), true, "4 is a square number (2 * 2)");
    Test.assertEquals(isSquare(25), true, "25 is a square number (5 * 5)");
    Test.assertEquals(isSquare(26), false, "26 is not a square number");

CODE 1:
var isSquare = function(n){
  return (Math.sqrt(n) % 1 === 0)? true : false
}

CODE 2:
function isSquare(n) {
  return Math.sqrt(n) % 1 === 0;
}

CODE 3:
const isSquare = n => Number.isInteger(Math.sqrt(n));

CODE 4:
var isSquare = function(n){
  return Number.isInteger(Math.sqrt(n));
}

CODE 5:
var isSquare = function(n){

  if((Math.sqrt(n) % 1) == 0)
    return true;
  else
    return false;
}

CODE 6:
const isSquare = n => Math.sqrt(n) % 1 === 0
