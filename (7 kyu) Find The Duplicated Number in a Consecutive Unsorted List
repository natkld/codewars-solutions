You are given an array of n+1 integers 1 through n. In addition there is a single duplicate integer.
The array is unsorted.
An example valid array would be [3, 2, 5, 1, 3, 4]. It has the integers 1 through 5 and 3 is duplicated. [1, 2, 4, 5, 5] would not be valid as it is missing 3.
You should return the duplicate value as a single integer.

Вам дается массив из n + 1 целых чисел от 1 до n. Кроме того, есть одно повторяющееся целое число.
Массив не отсортирован.
Пример допустимого массива: [3, 2, 5, 1, 3, 4]. Он имеет целые числа от 1 до 5 и 3 дублируется. [1, 2, 4, 5, 5] будет недействительным, так как отсутствует 3.
Повторяющееся значение должно быть возвращено как одно целое число.

Test.assertEquals(findDup([1,2,2,3]), 2);
Test.assertEquals(findDup([1,3,2,5,4,5,7,6]), 5);

CODE 1:
function findDup( arr ){
  return arr.filter((el, i) => arr.indexOf(el) !== arr.lastIndexOf(el))[0] 
}

CODE 2:
function findDup( arr ){
  arr.sort();
  
  for(let i = 0; i < arr.length; i += 1) {
    if(arr[i] == arr[i+1]) {
      return arr[i]
    }
  }
}

CODE 3:
function findDup(arr){
  return arr.reduce(function(n, v, i){
    return arr.indexOf(v) == i ? n : v;
  }, null);
}

CODE 4:
var findDup = arr => arr.filter((v, i) => arr.indexOf(v) != i)[0];

CODE 5:
function findDup(arr){
  return arr.reduce((a,b,i)=>a^b^i,0);
}

CODE 6:
function findDup( arr ){
  let n = arr.length - 1;
  return arr.reduce((p, c) => p + c, 0) - n * (n + 1) / 2;
}

CODE 7:
function findDup(arr){
  var seen = {};
  for(let e of arr) {
    if(seen[e])return e;
    seen[e]=true;
  }
}

CODE 8:
function findDup( arr ){
  for (var i=0;i<arr.length-1;i++){
    for (var j=i+1;j<arr.length;j++){
      if (arr[i]==arr[j]) return arr[j];
    }
  }
}

CODE 9:
function findDup( a ){
  return a.find(x=>a.indexOf(x)!=a.lastIndexOf(x));
}
