Task:
You have to create a function isPronic to check whether the argument passed is a Pronic Number and return true if it is & false otherwise.

Description:
Pronic Number -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1).
The first few Pronic Numbers are - 0, 2, 6, 12, 20, 30, 42...

Explanation:
  0 = 0 × 1   // ∴  0 is a Pronic Number
  2 = 1 × 2   // ∴  2 is a Pronic Number
  6 = 2 × 3   // ∴  6 is a Pronic Number
 12 = 3 × 4   // ∴ 12 is a Pronic Number
 20 = 4 × 5   // ∴ 20 is a Pronic Number
 30 = 5 × 6   // ∴ 30 is a Pronic Number
 42 = 6 × 7   // ∴ 42 is a Pronic Number
 
 CODE 1:
 function isPronic(n) {
   let a = Math.floor(Math.sqrt(n)) - 1
   while(a * (a + 1) <= n) {
      if(a * (a + 1) === n ) {
         return true }
       a++
   }
      return false
  }
  
        console.log(isPronic(0)  // true,   '0 is a Pronic Number');
        console.log(isPronic(1)  // false,  '1 is not a Pronic Number');
        console.log(isPronic(2)  // true,   '2 is a Pronic Number');
        console.log(isPronic(3)  // false,  '3 is not a Pronic Number');
        console.log(isPronic(4)  // false,  '4 is not a Pronic Number');
        console.log(isPronic(5)  // false,  '5 is not a Pronic Number');
        console.log(isPronic(6)  // true,   '6 is a Pronic Number');
        console.log(isPronic(-3) // false,  '-3 is not a Pronic Number');
        console.log(isPronic(-27)// false,  '-27 is not a Pronic Number');
CODE 2:
function isPronic(n){
  for (let i = 0; i <= n; i++) {
    if (n === i * (i + 1)) return true
  }
  return false
}

CODE 3:
function isPronic(n){if(n==0) return true;
  let a=0;
  for(let i =1;i<n;i++){n/i==i+1 ? a=a+1 : a}   ;
  return a>0 ? true:false;
}

CODE 4:
function isPronic(n){
  let pronic = false;
  for (i = -n ; i <= n; i++) {
   if ( i * (i + 1) === n) {
     pronic = true;
     }
  } 
  return  pronic;
} 

CODE 5:
function isPronic(n){
let sum = 0;
for (let i = 0; sum < n; i+=2){
sum = sum + i;
  }
  return sum === n? true : false;
}

CODE 6:
const isPronic = n => (d = n ** .5 | 0) * (d + 1) === n;

CODE 7:
function isPronic(n){
  return Math.sqrt(1 + 4 * n) % 1 === 0;
}
CODE 8:
const isPronic = n => Number.isInteger((4 * n + 1) ** .5);

  
